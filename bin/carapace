#!/usr/local/bin/node
//
// Carapace.js
//
// Rooting environment for Haibu applications
//
// 1. Needs to intercept binding ports for listening
// 2. Needs to chroot
// 3. Needs to chdir
// 4. Needs to notify master about events (port binding)
// 5. Make the script it runs act as if it were exactly the same (down to argv / require.main)
//
var net = require('net');
var netListen = net.Server.prototype._doListen;
var binding = process.binding('net');
var bindingBind = binding.bind;
var dnode = require('dnode');
var drone = require('../lib/haibu/bridge/drone');
//
// Helper function from Node code to parse port arguments
// passed to net.prototype.Server.listen
//
function toPort(x) {
  return (x = Number(x)) >= 0 ? x : false;
}
//
// Helper if our master is lost
//
function exitWithError() {
  return process.exit(1);
}
//First 6 arguments are for carapace
//
// Carapace arguments are for the rooting environment
//  * carapace.script
//  * carapace.root
//  * carapace.appPath
//  * carapace.socketFile || carapace.port
//  * carapace.appName
//  * carapace.id
//
// HaibuServer arguments are for dealing with provisioning and administration
//  * haibuServer.host
//  * haibuServer.port
//
var config = process.argv.splice(2,9);
var carapace = {};
carapace.config = {
  script  : config.shift(),
  root    : config.shift(),
  appPath : config.shift() || process.cwd(),
  port : config.shift(),
  appName: config.shift(),
  id     : config.shift()
};
if(!toPort(carapace.config.port)) {
  carapace.config.socketPath = carapace.config.port;
  delete carapace.config.port;
}


carapace.drone = {
  proxies : {}
};

var bridgeServer = net.createServer();
var socket = carapace.config.port || carapace.config.socketPath;
if (socket) {
  bridgeServer.listen(socket);
}
new drone(carapace.drone).listen(bridgeServer);


var haibu = {};
haibu.config = {
  host: config.shift(),
  port: config.shift()
}
if(!toPort(haibu.config.port)) {
  delete haibu.config.host;
  haibu.config.socketPath = haibu.config.port;
  delete haibu.config.port;
}

//
//  Helpers for talking to haibu
//
function getMasterClient(cb) {
 if(haibu.config.port) {
   dnode.connect(haibu.config.host, haibu.config.port, cb);
 }
 else if(haibu.config.socketPath) {
   dnode.connect(haibu.config.socketPath, cb);
 }
}
function registerPort(desiredPort, actualPort) {
  carapace.drone.proxies[desiredPort] = actualPort;
  getMasterClient(function(remote,conn) {
    conn.on('refuse',exitWithError)
    conn.on('drop',exitWithError);
    remote.proxy(carapace.config.id, desiredPort, actualPort, function(){
      remote.end();
    });
  })
}

//
// Set the root of the child process if requested
//
if (carapace.config.root) {
  var daemon = require('daemon');
  daemon.chroot(carapace.config.root);
}
if (carapace.config.appPath) {
  process.chdir(carapace.config.appPath);
}

//
// Start up the script as if it were the main module
//
// Note: this is doable because of removing the argv cli arguments
var path = require('path');
var fs = require('fs');
process.argv.splice(1,1,fs.realpathSync(require.resolve(path.join(process.cwd(),carapace.config.script))));
//
// Reset the cache if for some awful reason we required something that needs to be rerun during require
//
require('module').Module._cache = {};
getMasterClient(function(remote,conn) {
  console.dir(arguments)
  //
  // Bind clobber
  // fd, port | unix, addr?
  //
  // Used to prevent a socket being bound to a port and instead use a different port
  //
  binding.bind = function bind() {
    var port = arguments[1];
    port = toPort(port);
    if(!port) {
      return bindingBind.apply(this,arguments);
    }
    var desiredPort = port;
    arguments[1] = undefined;
    var result = bindingBind.apply(this,arguments);
    var actualPort = binding.getsockname(arguments[0]).port;
    registerPort(desiredPort,actualPort);
    return result;
  }
  
  //
  // Server _doListen clobber
  //
  // This needs to be done because listen uses a cached bind
  // Listening on a port should be deferred to any port and a port mapping should be emitted
  //
  net.Server.prototype._doListen = function _doListen() {
    port = arguments[0];
    port = toPort(port);
    if(!port) {
      return netListen.apply(this,arguments);
    }
    var desiredPort = port;
    arguments[0] = undefined;
    var result = netListen.apply(this,arguments);
    var actualPort = this.address().port;
    registerPort(desiredPort,actualPort);
    return result;
  }
  
  remote.heartbeat(carapace.config.id, function() {
    process.nextTick(function(){require('module').Module.runMain()});
  })
})
